'use client';

import React, { useState } from 'react';
import Layout from '@/components/layout/Layout';
import { NeonButton } from '@/components/ui/neon-button';
import Modal from '@/components/ui/Modal';
import { useTelegram } from '@/hooks/useTelegram';

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
const generateAvailableDates = () => {
  const dates = [];
  const today = new Date();
  
  for (let i = 1; i <= 14; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
    if (date.getDay() !== 0) {
      dates.push({
        date: date.toISOString().split('T')[0],
        dayName: date.toLocaleDateString('ru-RU', { weekday: 'long' }),
        dayNumber: date.getDate(),
        month: date.toLocaleDateString('ru-RU', { month: 'long' }),
        available: true
      });
    }
  }
  
  return dates;
};

const generateAvailableTimes = (date: string) => {
  const times = [];
  const startHour = 9;
  const endHour = 18;
  
  for (let hour = startHour; hour < endHour; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
      times.push({
        time: timeString,
        available: Math.random() > 0.3, // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        duration: '30 –º–∏–Ω'
      });
    }
  }
  
  return times;
};

export default function TimePage() {
  const { hapticFeedback } = useTelegram();
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [selectedTime, setSelectedTime] = useState<string>('');
  const [availableTimes, setAvailableTimes] = useState<any[]>([]);
  const [showTimeModal, setShowTimeModal] = useState<boolean>(false);

  const availableDates = generateAvailableDates();

  const handleDateSelect = (date: string) => {
    setSelectedDate(date);
    setSelectedTime('');
    setAvailableTimes(generateAvailableTimes(date));
    setShowTimeModal(true);
    hapticFeedback.impact('light');
  };

  const handleTimeSelect = (time: string) => {
    setSelectedTime(time);
    hapticFeedback.impact('light');
  };

  const handleCloseTimeModal = () => {
    setShowTimeModal(false);
  };

  const handleConfirmTime = () => {
    if (selectedTime) {
      setShowTimeModal(false);
      hapticFeedback.impact('medium');
    }
  };

  const handleContinue = () => {
    if (!selectedDate || !selectedTime) {
      hapticFeedback.impact('heavy');
      return;
    }
    hapticFeedback.impact('medium');
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    window.location.href = `/booking/masters?date=${selectedDate}&time=${selectedTime}`;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      weekday: 'long',
      day: 'numeric',
      month: 'long'
    });
  };

  return (
    <Layout 
      title="–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"
      showBackButton={true}
      backButtonHref="/booking"
    >
      <div className="container mx-auto max-w-sm px-4 py-4 pb-20">
        {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-white mb-4 drop-shadow-sm">üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</h3>
          <div className="grid grid-cols-2 gap-3">
            {availableDates.map((dateInfo) => (
              <button
                key={dateInfo.date}
                onClick={() => handleDateSelect(dateInfo.date)}
                className={`p-4 rounded-xl border transition-all duration-200 ${
                  selectedDate === dateInfo.date
                    ? 'border-primary-400 bg-primary-500/20 text-white'
                    : 'border-white/20 bg-white/10 text-white/70 hover:border-white/40 hover:text-white'
                }`}
              >
                <div className="text-center">
                  <div className="text-2xl font-bold mb-1">{dateInfo.dayNumber}</div>
                  <div className="text-sm capitalize">{dateInfo.dayName}</div>
                  <div className="text-xs opacity-70">{dateInfo.month}</div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è */}
        {selectedDate && selectedTime && (
          <div className="mb-6">
            <div className="bg-primary-500/20 border border-primary-400/30 rounded-xl p-4">
              <h4 className="font-semibold text-white mb-3 drop-shadow-sm">
                ‚úÖ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
              </h4>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-white/80">–î–∞—Ç–∞:</span>
                  <span className="font-semibold text-white">{formatDate(selectedDate)}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-white/80">–í—Ä–µ–º—è:</span>
                  <span className="font-semibold text-white">{selectedTime}</span>
                </div>
              </div>
            </div>
          </div>
        )}


        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ */}
        <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-xl p-4 mb-6">
          <h4 className="font-semibold text-white mb-3 drop-shadow-sm">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
          <div className="space-y-2 text-sm text-white/80">
            <div className="flex items-center space-x-2">
              <span>üïí</span>
              <span>–†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00 - 18:00</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>üìÖ</span>
              <span>–í—ã—Ö–æ–¥–Ω–æ–π: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ</span>
            </div>
            <div className="flex items-center space-x-2">
              <span>‚è±Ô∏è</span>
              <span>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –º–∏–Ω—É—Ç</span>
            </div>
          </div>
        </div>

        {/* –í—Å–ø–ª—ã–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è */}
        {selectedDate && selectedTime && (
          <div className="fixed bottom-4 left-4 right-4 z-40 animate-slide-up">
            <NeonButton
              variant="salon"
              size="xl"
              className="w-full py-4 text-lg font-bold hover:scale-105 active:scale-95 transition-all duration-300 shadow-2xl"
              onClick={handleContinue}
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –º–∞—Å—Ç–µ—Ä–∞ ({selectedTime})
            </NeonButton>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
        <Modal
          isOpen={showTimeModal}
          onClose={handleCloseTimeModal}
          title="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è"
        >
          <div className="p-4 text-white">
            <div className="text-sm text-white/80 mb-4 drop-shadow-sm text-center">
              –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: <span className="font-semibold text-white">{formatDate(selectedDate)}</span>
            </div>
            
            <div className="grid grid-cols-3 gap-2 max-h-60 overflow-y-auto">
              {availableTimes.map((timeInfo, index) => (
                <button
                  key={`${timeInfo.time}-${index}`}
                  onClick={() => timeInfo.available && handleTimeSelect(timeInfo.time)}
                  disabled={!timeInfo.available}
                  className={`p-3 rounded-lg text-sm font-medium transition-all duration-200 ${
                    !timeInfo.available
                      ? 'bg-gray-500/20 text-gray-500 cursor-not-allowed'
                      : selectedTime === timeInfo.time
                      ? 'bg-primary-500 text-white shadow-lg'
                      : 'bg-white/10 text-white hover:bg-white/20 border border-white/20'
                  }`}
                >
                  {timeInfo.time}
                </button>
              ))}
            </div>
            
            {selectedTime && (
              <div className="mt-4 pt-4 border-t border-white/20">
                <div className="text-center">
                  <div className="text-sm text-white/80 mb-3 drop-shadow-sm">
                    –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: <span className="font-semibold text-white">{selectedTime}</span>
                  </div>
                  <NeonButton
                    variant="salon"
                    size="lg"
                    className="w-full hover:scale-105 active:scale-95 transition-all duration-300"
                    onClick={handleConfirmTime}
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä–µ–º—è
                  </NeonButton>
                </div>
              </div>
            )}
          </div>
        </Modal>
      </div>
    </Layout>
  );
}
